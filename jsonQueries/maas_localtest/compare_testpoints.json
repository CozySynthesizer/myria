

{
  "logicalRa": "Store(public:adhoc:TestPointDifference)[Apply(pid=$0,x_1_diff=($1 - $5),x_2_diff=($2 - $6),mu_1_diff=($3 - $7),mu_2_diff=($4 - $8))[ProjectingJoin(($0 = $5); $0,$1,$2,$3,$4,$6,$7,$8,$9)[Scan(public:adhoc:PointsOnly),Scan(public:adhoc:ExpectedPoints)]]]",
  "language": "sql",
  "rawQuery": "Test = scan(public:adhoc:PointsOnly);\nExpected = scan(public:adhoc:ExpectedPoints);\n\nDifference = SELECT Test.$0 as pid, \n\t\t\t\t\tTest.$1 - Expected.$1 as x_1_diff,\n\t\t\t\t\tTest.$2 - Expected.$2 as x_2_diff,\n\t\t\t\t\tTest.$3 - Expected.$3 as mu_1_diff,\n\t\t\t\t\tTest.$4 - Expected.$4 as mu_2_diff\n\t\t\tFROM Test, Expected \n\t\t\tWHERE Test.$0 = Expected.$0;\n\nstore(Difference, public:adhoc:TestPointDifference);\n\n",
  "plan": {
    "fragments": [
      {
        "operators": [
          {
            "opName": "MyriaShuffleConsumer",
            "opType": "ShuffleConsumer",
            "opId": 0,
            "argOperatorId": 1
          },
          {
            "opName": "MyriaShuffleConsumer",
            "opType": "ShuffleConsumer",
            "opId": 2,
            "argOperatorId": 3
          },
          {
            "argColumnNames": [
              "pid",
              "x_1",
              "x_2",
              "r1",
              "r2",
              "x_11",
              "x_21",
              "r_1",
              "r_2"
            ],
            "argChild2": "0",
            "argChild1": "2",
            "opType": "SymmetricHashJoin",
            "opId": 4,
            "opName": "MyriaSymmetricHashJoin(($0 = $5); $0,$1,$2,$3,$4,$6,$7,$8,$9)",
            "argSelect2": [
              1,
              2,
              3,
              4
            ],
            "argColumns1": [
              0
            ],
            "argColumns2": [
              0
            ],
            "argSelect1": [
              0,
              1,
              2,
              3,
              4
            ]
          },
          {
            "emitExpressions": [
              {
                "outputName": "pid",
                "rootExpressionOperator": {
                  "type": "VARIABLE",
                  "columnIdx": 0
                }
              },
              {
                "outputName": "x_1_diff",
                "rootExpressionOperator": {
                  "right": {
                    "type": "VARIABLE",
                    "columnIdx": 5
                  },
                  "type": "MINUS",
                  "left": {
                    "type": "VARIABLE",
                    "columnIdx": 1
                  }
                }
              },
              {
                "outputName": "x_2_diff",
                "rootExpressionOperator": {
                  "right": {
                    "type": "VARIABLE",
                    "columnIdx": 6
                  },
                  "type": "MINUS",
                  "left": {
                    "type": "VARIABLE",
                    "columnIdx": 2
                  }
                }
              },
              {
                "outputName": "mu_1_diff",
                "rootExpressionOperator": {
                  "right": {
                    "type": "VARIABLE",
                    "columnIdx": 7
                  },
                  "type": "MINUS",
                  "left": {
                    "type": "VARIABLE",
                    "columnIdx": 3
                  }
                }
              },
              {
                "outputName": "mu_2_diff",
                "rootExpressionOperator": {
                  "right": {
                    "type": "VARIABLE",
                    "columnIdx": 8
                  },
                  "type": "MINUS",
                  "left": {
                    "type": "VARIABLE",
                    "columnIdx": 4
                  }
                }
              }
            ],
            "opName": "MyriaApply(pid=$0,x_1_diff=($1 - $5),x_2_diff=($2 - $6),mu_1_diff=($3 - $7),mu_2_diff=($4 - $8))",
            "opType": "Apply",
            "opId": 5,
            "argChild": 4
          },
          {
            "opType": "DbInsert",
            "argChild": 5,
            "opName": "MyriaStore(public:adhoc:TestPointDifference)",
            "argOverwriteTable": true,
            "opId": 6,
            "relationKey": {
              "userName": "public",
              "relationName": "TestPointDifference",
              "programName": "adhoc"
            }
          }
        ]
      },
      {
        "operators": [
          {
            "relationKey": {
              "userName": "public",
              "relationName": "PointsOnly",
              "programName": "adhoc"
            },
            "opType": "TableScan",
            "opName": "MyriaScan(public:adhoc:PointsOnly)",
            "opId": 7
          },
          {
            "opName": "MyriaShuffleProducer(h($0))",
            "opType": "ShuffleProducer",
            "opId": 3,
            "argChild": 7,
            "argPf": {
              "index": 0,
              "type": "SingleFieldHash"
            }
          }
        ]
      },
      {
        "operators": [
          {
            "relationKey": {
              "userName": "public",
              "relationName": "ExpectedPoints",
              "programName": "adhoc"
            },
            "opType": "TableScan",
            "opName": "MyriaScan(public:adhoc:ExpectedPoints)",
            "opId": 8
          },
          {
            "opName": "MyriaShuffleProducer(h($0))",
            "opType": "ShuffleProducer",
            "opId": 1,
            "argChild": 8,
            "argPf": {
              "index": 0,
              "type": "SingleFieldHash"
            }
          }
        ]
      }
    ],
    "type": "SubQuery"
  }
}


